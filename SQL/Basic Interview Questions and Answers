
Refer below Link : Basic Interview Quetions-- > https://www.interviewbit.com/sql-interview-questions/#sql

1. What is Database?
  Ans : A database is an organized collection of data, stored and retrieved digitally from a remote or local computer system. Databases can be vast and complex, and such databases are developed using fixed design and modeling approaches.

2. What is DBMS?
  Ans : DBMS stands for Database Management System. DBMS is a system software responsible for the creation, retrieval, updation, and management of the database. It ensures that our data is consistent, organized, and is easily accessible by serving as an interface between the database and its end-users or application software.

3. What is RDBMS? How is it different from DBMS?
  Ans :  RDBMS stands for Relational Database Management System. The key difference here, compared to DBMS, is that RDBMS stores data in the form of a collection of tables, and relations can be defined between the common fields of these tables. Most modern database management systems like MySQL, Microsoft SQL Server, Oracle, IBM DB2, and Amazon Redshift are based on RDBMS.

4. What is SQL?
  Ans : SQL stands for Structured Query Language. It is the standard language for relational database management systems. It is especially useful in handling organized data comprised of entities (variables) and relations between different entities of the data.

5. What is the difference between SQL and MySQL?
  Ans : SQL is a standard language for retrieving and manipulating structured databases. On the contrary, MySQL is a relational database management system, like SQL Server, Oracle or IBM DB2, that is used to manage SQL databases.

6. What are Tables and Fields?
  Ans : A table is an organized collection of data stored in the form of rows and columns. Columns can be categorized as vertical and rows as horizontal. The columns in a table are called fields while the rows can be referred to as records.

7. What are Constraints in SQL?
  Ans : Constraints are used to specify the rules concerning data in the table. It can be applied for single or multiple fields in an SQL table during the creation of the table or after creating using the ALTER TABLE command. The constraints are:
      NOT NULL - Restricts NULL value from being inserted into a column.
      CHECK - Verifies that all values in a field satisfy a condition.
      DEFAULT - Automatically assigns a default value if no value has been specified for the field.
      UNIQUE - Ensures unique values to be inserted into the field.
      INDEX - Indexes a field providing faster retrieval of records.
      PRIMARY KEY - Uniquely identifies each record in a table.
      FOREIGN KEY - Ensures referential integrity for a record in another table.    
8. What is a Primary Key?
  Ans : The PRIMARY KEY constraint uniquely identifies each row in a table. It must contain UNIQUE values and has an implicit NOT NULL constraint. A table in SQL is strictly restricted to have one and only one primary key, which is comprised of single or multiple fields (columns).
9. What is a UNIQUE constraint?
  Ans : A UNIQUE constraint ensures that all values in a column are different. This provides uniqueness for the column(s) and helps identify each row uniquely. Unlike primary key, there can be multiple unique constraints defined per table. The code syntax for UNIQUE is quite similar to that of PRIMARY KEY and can be used interchangeably.

10. What is a Foreign Key?
  Ans : A FOREIGN KEY comprises of single or collection of fields in a table that essentially refers to the PRIMARY KEY in another table. Foreign key constraint ensures referential integrity in the relation between two tables.

11. What is a Join? List its different types.
The SQL Join clause is used to combine records (rows) from two or more tables in a SQL database based on a related column between the two.
 here are four different types of JOINs in SQL:
              (INNER) JOIN: Retrieves records that have matching values in both tables involved in the join. This is the widely used join for queries.
                      SELECT *
                      FROM Table_A
                      JOIN Table_B;
                      SELECT *
                      FROM Table_A
                      INNER JOIN Table_B;
              LEFT (OUTER) JOIN: Retrieves all the records/rows from the left and the matched records/rows from the right table.
                      SELECT *
                      FROM Table_A A
                      LEFT JOIN Table_B B
                      ON A.col = B.col;
              RIGHT (OUTER) JOIN: Retrieves all the records/rows from the right and the matched records/rows from the left table.
                      SELECT *
                      FROM Table_A A
                      RIGHT JOIN Table_B B
                      ON A.col = B.col;
              FULL (OUTER) JOIN: Retrieves all the records where there is a match in either the left or right table.
                      SELECT *
                      FROM Table_A A
                      FULL JOIN Table_B B
                      ON A.col = B.col;
12. What is a Self-Join?
    Ans : A self JOIN is a case of regular join where a table is joined to itself based on some relation between its own column(s). Self-join uses the INNER JOIN or LEFT JOIN clause and a table alias is used to assign different names to the table within the query.
          SELECT A.emp_id AS "Emp_ID",A.emp_name AS "Employee",
          B.emp_id AS "Sup_ID",B.emp_name AS "Supervisor"
          FROM employee A, employee B
          WHERE A.emp_sup = B.emp_id;
13. What is a Cross-Join?
  Ans : Cross join can be defined as a cartesian product of the two tables included in the join. The table after join contains the same number of rows as in the cross-product of the number of rows in the two tables. If a WHERE clause is used in cross join then the query will work like an INNER JOIN.
          SELECT stu.name, sub.subject 
          FROM students AS stu
          CROSS JOIN subjects AS sub;
14. :  What is an Index? Explain its different types.
  Ans : A database index is a data structure that provides a quick lookup of data in a column or columns of a table. It enhances the speed of operations accessing data from a database table at the cost of additional writes and memory to maintain the index data structure.
        CREATE INDEX index_name   /* Create Index */
        ON table_name (column_1, column_2);
        DROP INDEX index_name;   /* Drop Index */
There are different types of indexes that can be created for different purposes:
      Unique and Non-Unique Index:
      Unique indexes are indexes that help maintain data integrity by ensuring that no two rows of data in a table have identical key values. Once a unique index has been defined for a table, uniqueness is enforced whenever keys are added or changed within the index.
CREATE UNIQUE INDEX myIndex
ON students (enroll_no);
Non-unique indexes, on the other hand, are not used to enforce constraints on the tables with which they are associated. Instead, non-unique indexes are used solely to improve query performance by maintaining a sorted order of data values that are used frequently.
Clustered and Non-Clustered Index:
    --> Clustered indexes are indexes whose order of the rows in the database corresponds to the order of the rows in the index. This is why only one clustered index can exist in a given table, whereas, multiple non-clustered indexes can exist in the table.
    --> The only difference between clustered and non-clustered indexes is that the database manager attempts to keep the data in the database in the same order as the corresponding keys appear in the clustered index.
    --> Clustering indexes can improve the performance of most query operations because they provide a linear-access path to data stored in the database.

15. What is the difference between Clustered and Non-clustered index?
          As explained above, the differences can be broken down into three small factors -
        -->  Clustered index modifies the way records are stored in a database based on the indexed column. A non-clustered index creates a separate entity within the table which references the original table.
              Clustered index is used for easy and speedy retrieval of data from the database, whereas, fetching records from the non-clustered index is relatively slower.
              In SQL, a table can have a single clustered index whereas it can have multiple non-clustered indexes.
16. What is Data Integrity?
  Ans : Data Integrity is the assurance of accuracy and consistency of data over its entire life-cycle and is a critical aspect of the design, implementation, and usage of any system which stores, processes, or retrieves data. It also defines integrity constraints to enforce business rules on the data when it is entered into an application or a database.

17. What is a Query?
  Ans : A query is a request for data or information from a database table or combination of tables. A database query can be either a select query or an action query.
          SELECT fname, lname    /* select query */
          FROM myDb.students
          WHERE student_id = 1;
          UPDATE myDB.students    /* action query */
          SET fname = 'Captain', lname = 'America'
          WHERE student_id = 1;
18. What is a Subquery? What are its types?
  Ans : A subquery is a query within another query, also known as a nested query or inner query. It is used to restrict or enhance the data to be queried by the main query, thus restricting or enhancing the output of the main query respectively. For example, here we fetch the contact information for students who have enrolled for the maths subject:
            SELECT name, email, mob, address
            FROM myDb.contacts
            WHERE roll_no IN (
             SELECT roll_no
             FROM myDb.students
             WHERE subject = 'Maths');
            There are two types of subquery - Correlated and Non-Correlated.

            A correlated subquery cannot be considered as an independent query, but it can refer to the column in a table listed in the FROM of the main query.
            A non-correlated subquery can be considered as an independent query and the output of the subquery is substituted in the main query.
            Write a SQL query to update the field "status" in table "applications" from 0 to 1.
            Write a SQL query to select the field "app_id" in table "applications" where "app_id" less than 1000.
            Write a SQL query to fetch the field "app_name" from "apps" where "apps.id" is equal to the above collection of "app_id".
19. What is the SELECT statement?
SELECT operator in SQL is used to select data from a database. The data returned is stored in a result table, called the result-set.

SELECT * FROM myDB.students;
20. What are some common clauses used with SELECT query in SQL?
Some common SQL clauses used in conjuction with a SELECT query are as follows:

WHERE clause in SQL is used to filter records that are necessary, based on specific conditions.
ORDER BY clause in SQL is used to sort the records based on some field(s) in ascending (ASC) or descending order (DESC).
SELECT *
FROM myDB.students
WHERE graduation_year = 2019
ORDER BY studentID DESC;
GROUP BY clause in SQL is used to group records with identical data and can be used in conjunction with some aggregation functions to produce summarized results from the database.
HAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since the WHERE clause cannot filter aggregated records.
SELECT COUNT(studentId), country
FROM myDB.students
WHERE country != "INDIA"
GROUP BY country
HAVING COUNT(studentID) > 5;
21. What are UNION, MINUS and INTERSECT commands?
The UNION operator combines and returns the result-set retrieved by two or more SELECT statements.
The MINUS operator in SQL is used to remove duplicates from the result-set obtained by the second SELECT query from the result-set obtained by the first SELECT query and then return the filtered results from the first.
The INTERSECT clause in SQL combines the result-set fetched by the two SELECT statements where records from one match the other and then returns this intersection of result-sets.

Certain conditions need to be met before executing either of the above statements in SQL -

Each SELECT statement within the clause must have the same number of columns
The columns must also have similar data types
The columns in each SELECT statement should necessarily have the same order
SELECT name FROM Students   /* Fetch the union of queries */
UNION
SELECT name FROM Contacts;
SELECT name FROM Students   /* Fetch the union of queries with duplicates*/
UNION ALL
SELECT name FROM Contacts;
SELECT name FROM Students   /* Fetch names from students */
MINUS     /* that aren't present in contacts */
SELECT name FROM Contacts;
SELECT name FROM Students   /* Fetch names from students */
INTERSECT    /* that are present in contacts as well */
SELECT name FROM Contacts;
Write a SQL query to fetch "names" that are present in either table "accounts" or in table "registry".
Write a SQL query to fetch "names" that are present in "accounts" but not in table "registry".
Write a SQL query to fetch "names" from table "contacts" that are neither present in "accounts.name" nor in "registry.name".







